{"uid":"cbe076f2d4275050","name":"用户注册登录修改--预期失败","fullName":"testcases.scenario_test.test_02_register_login_update.TestRegLogUpdate#test_user_register_login_update_fail","historyId":"5e88704a520d70faf3165b42517fe6c2","time":{"start":1744699199567,"stop":1744699199653,"duration":86},"description":"该用例是针对 注册-登录-修改 场景的测试","descriptionHtml":"<p>该用例是针对 注册-登录-修改 场景的测试</p>\n","status":"failed","statusMessage":"AssertionError: 接口返回码是 【 2005 】, 返回信息：手机号已被注册！！！ \nassert False is True\n +  where False = <core.result_base.ResultBase object at 0x10bc1a2e0>.success","statusTrace":"self = <testcases.scenario_test.test_02_register_login_update.TestRegLogUpdate object at 0x10bc2f6a0>\ntestcase_data = {'except_code': 4005, 'except_msg': '修改的用户ID不存在', 'except_result': False, 'login': {'admin_pwd': '123456', 'admin_user': 'wintest'}, ...}\n\n    @allure.story(\"用例--注册/登录/修改--预期失败\")\n    @allure.description(\"该用例是针对 注册-登录-修改 场景的测试\")\n    @allure.issue(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"用户注册登录修改--预期失败\")\n    @pytest.mark.multiple\n    @pytest.mark.usefixtures(\"delete_register_user\")\n    def test_user_register_login_update_fail(self, testcase_data):\n        username = testcase_data[\"register\"][\"username\"]\n        password = testcase_data[\"register\"][\"password\"]\n        telephone = testcase_data[\"register\"][\"telephone\"]\n        sex = testcase_data[\"register\"][\"sex\"]\n        address = testcase_data[\"register\"][\"address\"]\n        admin_user = testcase_data[\"login\"][\"admin_user\"]\n        admin_pwd = testcase_data[\"login\"][\"admin_pwd\"]\n        new_password = testcase_data[\"update\"][\"new_password\"]\n        new_telephone = testcase_data[\"update\"][\"new_telephone\"]\n        new_sex = testcase_data[\"update\"][\"new_sex\"]\n        new_address = testcase_data[\"update\"][\"new_address\"]\n        except_result = testcase_data[\"except_result\"]\n        except_code = testcase_data[\"except_code\"]\n        except_msg = testcase_data[\"except_msg\"]\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = register_user(username, password, telephone, sex, address)\n        step_1(username, password, telephone, sex, address)\n>       assert result.success is True, result.error\nE       AssertionError: 接口返回码是 【 2005 】, 返回信息：手机号已被注册！！！ \nE       assert False is True\nE        +  where False = <core.result_base.ResultBase object at 0x10bc1a2e0>.success\n\ntestcases/scenario_test/test_02_register_login_update.py:99: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"delete_register_user","time":{"start":1744699199511,"stop":1744699199566,"duration":55},"status":"passed","steps":[{"name":"前置步骤 ==>> 清理数据","time":{"start":1744699199564,"stop":1744699199565,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false},{"name":"testcase_data","time":{"start":1744699199566,"stop":1744699199566,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"testStage":{"description":"该用例是针对 注册-登录-修改 场景的测试","status":"failed","statusMessage":"AssertionError: 接口返回码是 【 2005 】, 返回信息：手机号已被注册！！！ \nassert False is True\n +  where False = <core.result_base.ResultBase object at 0x10bc1a2e0>.success","statusTrace":"self = <testcases.scenario_test.test_02_register_login_update.TestRegLogUpdate object at 0x10bc2f6a0>\ntestcase_data = {'except_code': 4005, 'except_msg': '修改的用户ID不存在', 'except_result': False, 'login': {'admin_pwd': '123456', 'admin_user': 'wintest'}, ...}\n\n    @allure.story(\"用例--注册/登录/修改--预期失败\")\n    @allure.description(\"该用例是针对 注册-登录-修改 场景的测试\")\n    @allure.issue(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应BUG的链接地址\")\n    @allure.testcase(\"https://www.cnblogs.com/wintest\", name=\"点击，跳转到对应用例的链接地址\")\n    @allure.title(\"用户注册登录修改--预期失败\")\n    @pytest.mark.multiple\n    @pytest.mark.usefixtures(\"delete_register_user\")\n    def test_user_register_login_update_fail(self, testcase_data):\n        username = testcase_data[\"register\"][\"username\"]\n        password = testcase_data[\"register\"][\"password\"]\n        telephone = testcase_data[\"register\"][\"telephone\"]\n        sex = testcase_data[\"register\"][\"sex\"]\n        address = testcase_data[\"register\"][\"address\"]\n        admin_user = testcase_data[\"login\"][\"admin_user\"]\n        admin_pwd = testcase_data[\"login\"][\"admin_pwd\"]\n        new_password = testcase_data[\"update\"][\"new_password\"]\n        new_telephone = testcase_data[\"update\"][\"new_telephone\"]\n        new_sex = testcase_data[\"update\"][\"new_sex\"]\n        new_address = testcase_data[\"update\"][\"new_address\"]\n        except_result = testcase_data[\"except_result\"]\n        except_code = testcase_data[\"except_code\"]\n        except_msg = testcase_data[\"except_msg\"]\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result = register_user(username, password, telephone, sex, address)\n        step_1(username, password, telephone, sex, address)\n>       assert result.success is True, result.error\nE       AssertionError: 接口返回码是 【 2005 】, 返回信息：手机号已被注册！！！ \nE       assert False is True\nE        +  where False = <core.result_base.ResultBase object at 0x10bc1a2e0>.success\n\ntestcases/scenario_test/test_02_register_login_update.py:99: AssertionError","steps":[{"name":"步骤1 ==>> 注册用户","time":{"start":1744699199652,"stop":1744699199652,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"username","value":"'测试test'"},{"name":"password","value":"'123456'"},{"name":"telephone","value":"'13599999999'"},{"name":"sex","value":"'1'"},{"name":"address","value":"'深圳市宝安区'"}],"stepsCount":0,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"attachments":[{"uid":"efd78e4be38ea864","name":"log","source":"efd78e4be38ea864.txt","type":"text/plain","size":1645},{"uid":"cec353e85599dce9","name":"stderr","source":"cec353e85599dce9.txt","type":"text/plain","size":2024}],"parameters":[],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":true,"attachmentsCount":2,"attachmentStep":false},"afterStages":[{"name":"delete_register_user::0","time":{"start":1744699199672,"stop":1744699199726,"duration":54},"status":"passed","steps":[{"name":"后置步骤 ==>> 清理数据","time":{"start":1744699199725,"stop":1744699199725,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"hasContent":true,"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false}],"labels":[{"name":"epic","value":"针对业务场景的测试"},{"name":"feature","value":"场景：用户注册-用户登录-修改用户"},{"name":"story","value":"用例--注册/登录/修改--预期失败"},{"name":"severity","value":"blocker"},{"name":"tag","value":"multiple"},{"name":"parentSuite","value":"testcases.scenario_test"},{"name":"suite","value":"test_02_register_login_update"},{"name":"subSuite","value":"TestRegLogUpdate"},{"name":"host","value":"192.168.10.5"},{"name":"thread","value":"23381-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.scenario_test.test_02_register_login_update"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"点击，跳转到对应用例的链接地址","url":"https://www.cnblogs.com/wintest","type":"test_case"},{"name":"点击，跳转到对应BUG的链接地址","url":"https://www.cnblogs.com/wintest","type":"issue"}],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["multiple"]},"source":"cbe076f2d4275050.json","parameterValues":[]}